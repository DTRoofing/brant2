[tool:pytest]
# Pytest configuration for BRANT PDF pipeline testing

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum version requirements
minversion = 7.0

# Output formatting
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --cov=app
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --maxfail=10

# Async support
asyncio_mode = auto

# Test markers
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions  
    e2e: End-to-end tests for complete workflows
    performance: Performance and load tests
    slow: Tests that take a long time to run
    pdf: Tests specifically for PDF processing
    google: Tests for Google Cloud services integration
    celery: Tests for Celery task processing
    database: Tests that require database operations
    upload: Tests for file upload functionality
    error: Tests for error handling scenarios

# Ignore warnings from dependencies
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*pytest-asyncio.*:pytest.PytestUnraisableExceptionWarning
    ignore:.*unclosed.*:ResourceWarning

# Test timeout (in seconds)
timeout = 300

# Coverage configuration
[coverage:run]
source = app
omit = 
    */tests/*
    */venv/*
    */__pycache__/*
    */alembic/*
    */migrations/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod