rule "celery-task-patterns" {
  description = "Robust Celery background task implementation"
  when = "creating Celery background tasks"
  then = "Follow these patterns:
- Use bind=True for task instance access
- Implement progress tracking with update_state
- Handle retries with exponential backoff
- Include proper error handling and logging
- Update database status throughout processing

Example:
@celery_app.task(bind=True, max_retries=3)
def process_document_task(self, document_id: str):
    try:
        self.update_state(
            state='PROGRESS',
            meta={'progress': 0.2, 'stage': 'Starting Document AI'}
        )
        # Process document...
    except Exception as e:
        if self.request.retries < self.max_retries:
            countdown = 60 * (2 ** self.request.retries)
            raise self.retry(countdown=countdown, exc=e)
        raise"
}
