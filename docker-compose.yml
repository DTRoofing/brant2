services:
  api:
    build:
      context: .
      dockerfile: backend.Dockerfile
    ports:
      - "3001:3001"
    env_file:
      - .env
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/app/google-credentials.json
      - UPLOAD_DIR=/app/uploads
    volumes:
      - ./app:/app/app
      - ./requirements.txt:/app/requirements.txt
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      # Remove credentials volume mount - handled in Dockerfile securely
      - ./.env:/app/.env:ro
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/pipeline/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: false  # Set to true in production, false for development volumes
    restart: unless-stopped

  # frontend:
  #   build:
  #     context: ./frontend_ux
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   env_file:
  #     - .env
  #   environment:
  #     # This service connects to the backend 'api' service.
  #     # Ensure the frontend's proxy is configured to point to http://api:3001
  #     - NODE_ENV=development
  #   volumes:
  #     # Mounts for development to allow hot-reloading
  #     - ./frontend_ux:/app
  #     - /app/node_modules
  #     - /app/.next
  #   depends_on:
  #     - api
  #   restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: worker.Dockerfile
    env_file:
      - .env
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/app/google-credentials.json
      - UPLOAD_DIR=/app/uploads
    volumes:
      - ./app:/app/app
      - ./requirements.txt:/app/requirements.txt
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      # Remove credentials volume mount - handled in Dockerfile securely
      - ./.env:/app/.env:ro
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    read_only: false  # Set to true in production, false for development volumes
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  flower:
    image: mher/flower
    ports:
      - "5555:5555"
    env_file:
      - .env
    command:
      - "celery"
      - "flower"
      - "--broker=${CELERY_BROKER_URL}"
      - "--result_backend=${CELERY_RESULT_BACKEND}"
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  redis_data:
